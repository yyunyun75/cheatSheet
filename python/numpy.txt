After python
pip install jupyter
jupyter notebook

Your First NumPy Array

# Import the numpy package as np
import numpy as np

baseball = [180, 215, 210, 210, 188, 176, 209, 200]

# Create a numpy array from baseball: np_baseball
np_baseball = np.array(baseball)

# Print out type of np_baseball
print(type(np_baseball))

------------------------------------------------------------------------------------------------------------------------
You are a huge baseball fan. You decide to call the MLB (Major League Baseball) and ask around for some more statistics on the height of the main players. 
They pass along data on more than a thousand players, which is stored as a regular Python list: height_in. The height is expressed in inches. 
Can you make a numpy array out of it and convert the units to meters?
# Import numpy
import numpy as np

# Create a numpy array from height_in: np_height_in
np_height_in = np.array(height_in)

# Print out np_height_in
print(np_height_in)

# Convert np_height_in to m: np_height_m
np_height_m = np_height_in*0.0254

# Print np_height_m
print(np_height_m)

------------------------------------------------------------------------------------------------------------------------
NumPy Side Effects
numpy is great for doing vector arithmetic. If you compare its functionality with regular Python lists, however, some things have changed.

First of all, numpy arrays cannot contain elements with different types. Second, the typical arithmetic operators, such as +, -, * and / have a different meaning for regular Python lists and numpy arrays.

Some lines of code have been provided for you. Try these out and select the one that would match this:

np.array([True, 1, 2]) + np.array([3, 4, False])  -> array([4, 5, 2])

equals

np.array([4, 3, 0]) + np.array([0, 2, 2]) -> array([4, 5, 2])

------------------------------------------------------------------------------------------------------------------------
Subsetting NumPy Arrays
Subsetting (using the square bracket notation on lists or arrays) works exactly the same with both lists and arrays.

import numpy as np

np_weight_lb = np.array(weight_lb)
np_height_in = np.array(height_in)

# Print out the weight at index 50
print(np_weight_lb[50])

# Print out sub-array of np_height_in: index 100 up to and including index 110
print(np_height_in[100 :111])

------------------------------------------------------------------------------------------------------------------------
Your First 2D NumPy Array

import numpy as np

baseball = [[180, 78.4],
            [215, 102.7],
            [210, 98.5],
            [188, 75.2]]

# Create a 2D numpy array from baseball: np_baseball
np_baseball = np.array(baseball)

# Print out the type of np_baseball
print(type(np_baseball))  -> <class 'numpy.ndarray'>

# Print out the shape of np_baseball
print(np_baseball.shape) -> (4,2)

------------------------------------------------------------------------------------------------------------------------
import numpy as np

# Create a 2D numpy array from baseball: np_baseball
np_baseball = np.array(baseball)

# Print out the shape of np_baseball
print(np_baseball.shape)

------------------------------------------------------------------------------------------------------------------------

import numpy as np

np_baseball = np.array(baseball)

# Print out the 50th row of np_baseball
print(np_baseball[49])

# Select the entire second column of np_baseball: np_weight_lb
np_weight_lb = np_baseball[:, 1]

# Print out height of 124th player
print(np_baseball[123, 0])

------------------------------------------------------------------------------------------------------------------------
2D Arithmetic
2D numpy arrays can perform calculations element by element, like numpy arrays.

np_baseball is coded for you; it's again a 2D numpy array with 3 columns representing height (in inches), weight (in pounds) and age (in years). 
baseball is available as a regular list of lists and updated is available as 2D numpy array.

import numpy as np

np_baseball = np.array(baseball)

# Print out addition of np_baseball and updated
print(np_baseball+updated)

# Create numpy array: conversion
conversion = np.array([0.0254, 0.453592, 1])

# Print out product of np_baseball and conversion
print(np_baseball*conversion)

summary, all the array for height, weight changes, age keeps the same

------------------------------------------------------------------------------------------------------------------------
Average versus median
You now know how to use numpy functions to get a better feeling for your data.

The baseball data is available as a 2D numpy array with 3 columns (height, weight, age) and 1015 rows. The name of this numpy array is np_baseball. 
After restructuring the data, however, you notice that some height values are abnormally high. 
Follow the instructions and discover which summary statistic is best suited if you're dealing with so-called outliers. np_baseball is available.

import numpy as np

# Create np_height_in from np_baseball
np_height_in = np_baseball[:,0]

# Print out the mean of np_height_in
print(np.mean(np_height_in))

# Print out the median of np_height_in
print(np.median(np_height_in))

------------------------------------------------------------------------------------------------------------------------
Explore the baseball data
Because the mean and median are so far apart, you decide to complain to the MLB. They find the error and send the corrected data over to you. It's again available as a 2D NumPy array np_baseball, with three columns.

The Python script in the editor already includes code to print out informative messages with the different summary statistics and numpy is already loaded as np. Can you finish the job? np_baseball is available.

avg = np.mean(np_baseball[:,0])
print("Average: " + str(avg))

# Print median height
med = np.median(np_baseball[:,0])
print("Median: " + str(med))

# Print out the standard deviation on height
stddev = np.std(np_baseball[:,0])
print("Standard Deviation: " + str(stddev))

# Print out correlation between first and second column
corr = np.corrcoef(np_baseball[:,0],np_baseball[:,1])
print("Correlation: " + str(corr))

