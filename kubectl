Testing environment: https://kubernetes.io/docs/tutorials/hello-minikube/

Pod related
aws eks update-kubeconfig --name [cluster name] //set the aws eks clustername 
kubectl get po -A //get all the pods in current cluster

Namespace Related
kubectl get ns //get all the namespace
kubectl create ns myns //create namespace called myns
kubectl run nginx --image=nginx --namespace=myns   //create pod called nginx in myns namespace
kubectl get pods --namespace=myns //get pods under myns namespace
kubectl config set-context --current --namespace=myns  //make myns the default namespace
kubectl config get-contexts //get all the contexts
kubectl config view --minify |grep namespace //verify current namespace

Replica Set (rs.yml)
kubectl create -f rs.yml --save-config //create replica set use file rs.yml
kubectl get rs //get all the repica set, inlude name called "myapp-rc"
kubectl delete rs myapp-rc //delete replica set called "myapp-rc"

Deployment
kubectl create deployment kubernetes-bootcamp --image=gcr.io/google-samples/kubernetes-bootcamp:v1 --dry-run=client -o yaml>deploy.yaml //dry-run set as client creates the deployment file but don't run
cat deploy.yaml //check the content of the yaml
kubectl apply -f deploy.yaml //this will update the deployment in case it has already been created
kubectl get all //check deployment, replica set, pod etc.
kubectl delete deployment kubernetes-bootcamp //delete deployment and replica set then the pod, the pod deletion takes little longer
kubectl logs pod/[pod Name] //check the log of a pod
kubectl scale deployment web-server --replicas=6 //update deployment "web-server" to have 6 replicas
kubectl rollout history deployment web-server //check the deployment history
kubectl rollout undo deployment web-server //undo the last deployment
kubectl edit deployment web-server --record //edit the deployment, keep in history record
kubectl set image deployment web-server httpd=httpd:2.4.38-alpine --record //change the deployment image
kubectl expose deployment web-server --type=LoadBalancer --port=80 //expose the deployment "web-server" to the public use load balancer
watch kubectl get services //get exteranl ip and load in browser

Run related command
kubectl run -i --tty busybox --image=busybox -- sh //run pod as interctive shell, here --tty opens interactive terminal, first busybox means the name of the pod, double dash means it is t the end of options, there's a space between double dash and sh
kubectl run -i --tty busybox --image=busybox -- env //create pod and run command env
kubectl exec -it pod/[pod name] -- sh //running interative command sh inside pod
kubectl exec -it pod/[pod name] -- /bin/bash //run bash sheell interativly inside pod
kubectl exec pod/[pod name] -- ls /    //run list command inside pod
kubectl exec pod/[pod name] -- env     //run env command inside pod

Labels and annotation
kubectl get pods -L color,tier. //get pods with color, tier label, command separated no space
kubectl get pods -L colors,tier -l "colors=green" //get pods with only colors=green
kubectl get pods -L colors,tier -l "colors=red,tier!=bt" //get pods with colors=red but tier is not bt
kubectl get pods -L colors,tier -l "colors in (red,green)" //get pods with colors in red, green
 
kubectl describe pod red-frontend | grep Annotations

cron job
kubectl create job one-off --image=alpine -- sleep 30 //Create a Job named one-off that sleeps for 30 seconds
kubectl get jobs one-off -o yaml | more //Read through the spec of the Job to see what other fields can be configured

Create a Job that has a Pod that always fails: (pod-fail.yaml)

cat << 'EOF' > pod-fail.yaml
apiVersion: batch/v1
...
EOF
kubectl create -f pod-fail.yaml

Create cron job that runs every minute (cronjob-example.yaml)

cat << 'EOF' > cronjob-example.yaml
apiVersion: batch/v1
...
EOF
kubectl create -f cronjob-example.yaml
 
